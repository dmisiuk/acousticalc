name: Go CI with Enhanced Testing Framework

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.25.1'
  TEST_PARALLEL_JOBS: 4
  COVERAGE_THRESHOLD: 80

jobs:
  test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-

    - name: Install X11 development libraries (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxext-dev libxrandr-dev libxtst-dev libxinerama-dev libxi-dev

    - name: Run linting checks
      run: |
        make format-check
        make vet

    - name: Build project
      run: go build ./...

    - name: Build CLI binary
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          go build -o cmd/acousticalc/acousticalc.exe cmd/acousticalc/main.go
        else
          go build -o cmd/acousticalc/acousticalc cmd/acousticalc/main.go
        fi

    - name: Run unit tests
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          go test -v -timeout=30s ./tests/unit/...
        else
          go test -v -timeout=30s -parallel=${{ env.TEST_PARALLEL_JOBS }} ./tests/unit/...
        fi

    - name: Run integration tests
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          go test -v -timeout=60s ./tests/integration/...
        else
          go test -v -timeout=60s -parallel=${{ env.TEST_PARALLEL_JOBS }} ./tests/integration/...
        fi

    - name: Install visual testing dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb x11-utils imagemagick xauth

    - name: Run visual tests with Xvfb (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: GabrielBB/xvfb-action@v1
      with:
        run: |
          echo "Running visual tests with virtual display..."
          go test -v -timeout=120s ./tests/visual/...
        options: "-screen 0 1920x1080x24"

    - name: Run visual tests (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        echo "Running visual tests on macOS with native display..."
        go test -v -timeout=120s ./tests/visual/...

    - name: Run visual tests (Windows - Limited)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        echo "Running non-GUI visual tests on Windows..."
        # Run only tests that don't require screenshot capture
        go test -v -timeout=60s ./tests/visual/... -run="Test.*Architecture|Test.*Performance|Test.*Artifact.*Generation" || echo "Some visual tests skipped on Windows"

    - name: Generate coverage
      shell: bash
      run: |
        mkdir -p tests/artifacts/coverage
        # Generate coverage for core calculator package (targeting >90% coverage)
        go test -coverprofile=tests/artifacts/coverage/combined_coverage.out -covermode=atomic -coverpkg=github.com/dmisiuk/acousticalc/pkg/calculator ./tests/unit/...

    - name: Generate coverage report
      shell: bash
      run: |
        go tool cover -html=tests/artifacts/coverage/combined_coverage.out -o tests/artifacts/coverage/coverage.html
        go tool cover -func=tests/artifacts/coverage/combined_coverage.out > tests/artifacts/coverage/coverage_summary.txt

    - name: Check coverage threshold
      shell: bash
      run: |
        # Extract coverage percentage (works on all platforms with bash shell)
        coverage=$(go tool cover -func=tests/artifacts/coverage/combined_coverage.out | grep "total:" | awk '{print $3}' | sed 's/%//')
        echo "Detected coverage: $coverage%"

        # Use awk for cross-platform numeric comparison (works on all platforms)
        result=$(echo "$coverage ${{ env.COVERAGE_THRESHOLD }}" | awk '{if ($1 < $2) print "FAIL"; else print "PASS"}')

        if [ "$result" == "FAIL" ]; then
          echo "Coverage $coverage% is below threshold ${{ env.COVERAGE_THRESHOLD }}%"
          exit 1
        fi

        echo "Coverage $coverage% meets threshold ${{ env.COVERAGE_THRESHOLD }}%"

    - name: Run benchmarks (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        mkdir -p tests/artifacts/reports
        go test -bench=. -benchmem -timeout=120s ./tests/unit/... > tests/artifacts/reports/benchmark_results.txt 2>&1

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: |
          tests/artifacts/
        retention-days: 30

    - name: Upload visual test artifacts (Linux)
      uses: actions/upload-artifact@v4
      if: always() && matrix.os == 'ubuntu-latest'
      with:
        name: visual-test-artifacts-${{ matrix.os }}
        path: |
          tests/artifacts/screenshots/
          tests/artifacts/demo_content/
          tests/artifacts/baselines/
        retention-days: 7

  e2e-test:
    name: E2E Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum

    - name: Install asciinema (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y asciinema
        # Install Xvfb for potential TUI tests
        sudo apt-get install -y xvfb

    - name: Install asciinema (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install asciinema

    - name: Configure PowerShell for E2E tests (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process

    - name: Run E2E tests
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          # Use Xvfb to run tests in a virtual display environment
          xvfb-run go test -v -timeout=300s ./tests/e2e/...
        else
          go test -v -timeout=300s ./tests/e2e/...
        fi

    - name: Upload E2E artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-results-${{ matrix.os }}
        path: |
          tests/artifacts/e2e/
        retention-days: 30

  test-matrix:
    name: Comprehensive Testing Matrix
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run race condition tests
      run: go test -race -timeout=120s ./tests/unit/ ./tests/integration/...

    - name: Validate Unix test tools
      run: |
        chmod +x tests/scripts/unix_test_tools.sh
        chmod +x tests/scripts/unix_env_validate.sh
        tests/scripts/unix_env_validate.sh

    - name: Test Unix Makefile
      run: |
        cd tests/scripts
        make check-deps
        make show-config
        make test-unit

    - name: Test performance monitoring
      run: |
        cd tests/scripts
        make monitor-performance

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: test
    # Run on both PRs and main branch for comprehensive coverage tracking

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate coverage report
      run: |
        # Find and combine all coverage files
        mkdir -p coverage-report
        echo "mode: atomic" > coverage-report/combined_coverage.out

        for file in test-results-*/coverage/*.out; do
          if [ -f "$file" ] && [[ "$file" != *"combined_coverage.out"* ]]; then
            tail -n +2 "$file" >> coverage-report/combined_coverage.out
          fi
        done

        # Generate HTML report
        go tool cover -html=coverage-report/combined_coverage.out -o coverage-report/coverage.html
        go tool cover -func=coverage-report/combined_coverage.out > coverage-report/coverage_summary.txt

    - name: Upload coverage to codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage-report/combined_coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-report/
        retention-days: 90

  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: test
    # Keep main-branch only: expensive benchmarks for trend analysis, not PR blocking
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run detailed benchmarks
      run: |
        mkdir -p benchmark-results
        go test -bench=. -benchmem -benchtime=5s -count=3 ./tests/unit/... > benchmark-results/detailed_benchmarks.txt 2>&1

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results/
        retention-days: 90

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    # Run on both PRs and main branch to prevent security issues from entering main

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        files=$(go fmt ./...)
        if [ -n "$files" ]; then
          echo "Files are not formatted:"
          echo "$files"
          exit 1
        fi

    - name: Check for vulnerabilities
      uses: golang/govulncheck-action@v1
      with:
        go-version-input: ${{ env.GO_VERSION }}
        go-package: ./...

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, e2e-test, test-matrix, coverage-report, performance-benchmark, security-scan]
    if: always() && (github.event_name == 'push' || github.event_name == 'pull_request')

    steps:
    - name: Notify on test failure
      if: needs.test.result == 'failure' || needs.e2e-test.result == 'failure' || needs.test-matrix.result == 'failure'
      run: |
        echo "::warning ::Some tests failed. Please check the logs above."

    - name: Notify on coverage issues
      if: needs.coverage-report.result == 'failure'
      run: |
        echo "::warning ::Coverage generation failed or threshold not met."

    - name: Success notification
      if: needs.test.result == 'success' && needs.e2e-test.result == 'success' && needs.test-matrix.result == 'success'
      run: |
        echo "::notice ::All tests passed successfully!"
